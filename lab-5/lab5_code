import numpy as np
import random
import math

# Define the objective function: Simple Quadratic Function
def objective_function(x):
    return x ** 2

# Simulated Annealing Algorithm
def simulated_annealing(objective, initial_solution, initial_temp, cooling_rate, max_iter):
    current_solution = initial_solution
    current_value = objective(current_solution)
    best_solution = current_solution
    best_value = current_value

    temperature = initial_temp

    for i in range(max_iter):
        # Generate a new solution by perturbing the current solution
        new_solution = current_solution + np.random.normal(0, 1)
        new_value = objective(new_solution)

        # Calculate the acceptance probability
        if new_value < current_value or random.uniform(0, 1) < math.exp((current_value - new_value) / temperature):
            current_solution = new_solution
            current_value = new_value

            # Update the best solution found
            if current_value < best_value:
                best_solution = current_solution
                best_value = current_value

        # Print the current iteration details
        print(f"Iteration {i + 1}: Best Solution = {best_solution:.4f}, Best Value = {best_value:.4f}")

        # Cool down the temperature
        temperature *= cooling_rate

    return best_solution, best_value

# Parameters
initial_solution = np.random.uniform(-10, 10)  # Random initial solution
initial_temp = 1000
cooling_rate = 0.99
max_iter = 10  # Reduced for demonstration

# Run Simulated Annealing
best_solution, best_value = simulated_annealing(objective_function, initial_solution, initial_temp, cooling_rate, max_iter)

print("\nFinal Best Solution:", best_solution)
print("Final Best Value:", best_value)
